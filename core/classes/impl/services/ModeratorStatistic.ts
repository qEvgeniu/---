import {Moderator} from "../entity/Moderator";
import {Some} from "../../../types/Some";
import {ModeratorsModule} from "../database/modules/ModeratorsModule";
import {Cash} from "../../../namespaces/Cash";
import {AdminsModule} from "../database/modules/AdminsModule";

export class ModeratorStatistic {

    public constructor(public user: Moderator) {}

    public getStatisticMessage = () : string => {
        return `
üë§ –ù–∏–∫ ‚Äî ${this.user.nick}
‚ìÇÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî ${this.user.moderatorType.displayName}
‚òëÔ∏è –î–æ–ª–∂–Ω–æ—Å—Ç—å ‚Äî ${this.user.rank.displayName}
‚§¥Ô∏è –ü–æ—Å–ª–µ–¥. –ø–æ–≤—ã—à–µ–Ω–∏–µ ‚Äî ${this.user.lastAppointment.getDaysDifference()} –¥–Ω–µ–π –Ω–∞–∑–∞–¥
üí≤ –ë–∞–ª–ª—ã ‚Äî ${this.user.points}
‚ö° –í–æ–∑—Ä–∞—Å—Ç ‚Äî ${this.user.age} –ª–µ—Ç

üíª –î–æ—Å—Ç—É–ø –∫ –ü–ö ‚Äî ${this.user.hasPC ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}
üìò Discord ‚Äî ${this.user.discord}
üìï Forum ‚Äî ${this.user.forum}
üÜî VK ID ‚Äî ${this.user.userId}

üÖ∞Ô∏è –í—ã–≥–æ–≤–æ—Ä—ã ‚Äî ${this.user.warns}/3
üÖ±Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚Äî ${this.user.preds}/2
${this.user.globalBan ? '\n‚ÄºÔ∏è –ò–º–µ–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞! ‚ÄºÔ∏è' : ''}
${this.user.aban ? '\n‚ùÑÔ∏è –ü—Ä–∞–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã ‚ùÑÔ∏è' : ''}
        `
    }

    public async editForum(newForum: string) : Some {
        await ModeratorsModule.update({forum: newForum}, {userId: this.user.userId})
    }

    public async editDiscord(newDiscord: string) : Some {
        await ModeratorsModule.update({discord: newDiscord}, {userId: this.user.userId})
    }

    public async editAge(age: number) : Some {
        await ModeratorsModule.update({age}, {userId: this.user.userId})
    }

    public async editPC(pc: boolean) : Some {
        await ModeratorsModule.update({hasPc: pc}, {userId: this.user.userId})
    }

    public async kick() : Some {
        await ModeratorsModule.delete({userId: this.user.userId})
        Cash.MODERATORS.delete(this.user.userId)
        await AdminsModule.delete({userId: this.user.userId})
    }

    public async setRank(rank: string) : Some {
        await ModeratorsModule.update({rang: rank, lastAppointment: new Date()}, {userId: this.user.userId})
    }

    public async warn(warnType: '–≤—ã–≥–æ–≤–æ—Ä' | '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ') : Some {
        await ModeratorsModule.update(warnType === '–≤—ã–≥–æ–≤–æ—Ä' ? {vigs: this.user.warns+1} : {preds: this.user.preds+1}, {userId: this.user.userId})
    }

    public async unwarn(warnType: '–≤—ã–≥–æ–≤–æ—Ä' | '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ') : Some {
        await ModeratorsModule.update(warnType === '–≤—ã–≥–æ–≤–æ—Ä' ? {vigs: this.user.warns-1} : {preds: this.user.preds-1}, {userId: this.user.userId})
    }

    public async points(newPoints: number) : Some {
        await ModeratorsModule.update({points: newPoints}, {userId: this.user.userId})
    }

    public async aban(state: boolean) : Some {
        await ModeratorsModule.update({aban: state}, {userId: this.user.userId})
    }

}