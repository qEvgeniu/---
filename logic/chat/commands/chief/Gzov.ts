import {BaseCommandExecutor} from "../../../../core/classes/impl/executors/BaseCommandExecutor";
import {ChatMessageEvent} from "../../../../core/classes/impl/events/ChatMessageEvent";
import {Some} from "../../../../core/types/Some";
import {NamedCommand} from "../../../../core/annotations/routing/NamedCommand";
import {WithAlias} from "../../../../core/annotations/routing/WithAlias";
import {ChatType} from "../../../../core/enums/ChatType";
import {ChatsModule} from "../../../../core/classes/impl/database/modules/ChatsModule";
import {Chat} from "../../../../core/classes/impl/entity/Chat";

@NamedCommand('gzov')
@WithAlias('–≥–∑–æ–≤')
export class Gzov extends BaseCommandExecutor {

    public override async execute(message: ChatMessageEvent): Some {
        if (message.args.length < 1) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –±–µ—Å–µ–¥!`)
        const channelsType = message.args[0]
        const types : Map<string, ChatType> = new Map([
            ['basic', ChatType.BASIC],
            ['player', ChatType.PLAYER],
            ['panel', ChatType.PANEL]
        ])
        if (!types.has(channelsType)) return await message.reply(`
–¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!
basic - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
panel - –º–æ–¥–µ—Ä–∞—Ü–∏—è –í–ö
player - –¥—Ä—É–≥–æ–µ
        `)

        if (message.args.length < 2) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!`)
        const reason : string = message.sliceArgs(1)
        const sendMessage = `üîî –í—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã ${message.sender.getOnlyMention('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')} –±–µ—Å–µ–¥—ã!\n\n@all\n\n‚ùó –ü—Ä–∏—á–∏–Ω–∞: ${reason}`

        await message.reply(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–æ –≤—Å–µ –±–µ—Å–µ–¥—ã!`)

        const allChats = await ChatsModule.select({chatType: channelsType})
        for (const i of allChats) {
            const chat = new Chat(i.chatId)
            await chat.send({message: sendMessage})
        }

    }

}