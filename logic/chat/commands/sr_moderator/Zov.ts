import {BaseCommandExecutor} from "../../../../core/classes/impl/executors/BaseCommandExecutor";
import {ChatMessageEvent} from "../../../../core/classes/impl/events/ChatMessageEvent";
import {Some} from "../../../../core/types/Some";
import {NamedCommand} from "../../../../core/annotations/routing/NamedCommand";
import {WithAlias} from "../../../../core/annotations/routing/WithAlias";
import {Chat} from "../../../../core/classes/impl/entity/Chat";
import {Member} from "../../../../core/classes/impl/entity/Member";

@NamedCommand('zov')
@WithAlias('–∑–æ–≤')
@WithAlias('–≤—ã–∑–æ–≤')
@WithAlias('—Å–ª–∞–≤–∞—É–∫—Ä–∞–∏–Ω–µ')
export class Zov extends BaseCommandExecutor {

    public override async execute(message: ChatMessageEvent): Some {
        if (message.args.length < 1) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤—ã–∑–æ–≤–∞!`)
        const reason : string = message.getFullArgs;
        const chat : Chat = message.chat;
        const sender : Member = message.sender;

        const members : Set<Member> = await chat.getMembers();
        const chunkSize : number = 100;

        for (let i = 0; i < members.size; i += chunkSize) {
            const chunk : Member[] = Array.from(members).slice(i, i + chunkSize);

            await chat.send({
                message: `
üîî –í—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã ${sender.getOnlyMention('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')} –±–µ—Å–µ–¥—ã

${chunk.map(user => user.getOnlyMention('üñ§')).join('')}

‚ùó –ü—Ä–∏—á–∏–Ω–∞ –≤—ã–∑–æ–≤–∞: ${reason}
                `
            })

        }

    }

}