import {BaseExecutor} from "../../../core/classes/base/executors/BaseExecutor";
import {PrivateMessageEvent} from "../../../core/classes/impl/events/PrivateMessageEvent";
import {Some} from "../../../core/types/Some";
import {PrivateCommand} from "../../../core/annotations/routing/PrivateCommand";
import {Moderator} from "../../../core/classes/impl/entity/Moderator";
import {PanelModeratorRank} from "../../../core/classes/impl/enums/PanelModeratorRank";
import {ModeratorRank} from "../../../core/classes/impl/enums/ModeratorRank";
import {NameCase} from "../../../core/classes/impl/enums/NameCase";

@PrivateCommand('aban')
@PrivateCommand('–∞–±–∞–Ω')
@PrivateCommand('adminban')
@PrivateCommand('–∞–¥–º–∏–Ω–±–∞–Ω')
@PrivateCommand('–∑–∞–º–æ—Ä–æ–∑–∫–∞')
export class AdminBan extends BaseExecutor {

    public async execute(message: PrivateMessageEvent) : Some {
        const sender : Moderator = message.sender;
        await sender.init();

        if (sender.rank instanceof PanelModeratorRank || sender.rank.weight < ModeratorRank.CURATOR.weight) return;
        if (message.args.length < 3) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`);

        const action : string = message.args[1];
        const map : Map<string, 'add' | 'remove'> = new Map([
            ['add', 'add'],
            ['–≤—ã–¥–∞—Ç—å', 'add'],
            ['give', 'add'],
            ['–¥–∞—Ç—å', 'add'],
            ['set', 'add'],
            ['+', 'add'],

            ['remove', 'remove'],
            ['–∑–∞–±—Ä–∞—Ç—å', 'remove'],
            ['take', 'remove'],
            ['—É–±—Ä–∞—Ç—å', 'remove'],
            ['del', 'remove'],
            ['-', 'remove']
        ])
        if (!map.has(action)) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ "–≤—ã–¥–∞—Ç—å", –ª–∏–±–æ "–∑–∞–±—Ä–∞—Ç—å"!`)
        const abanAction : 'remove' | 'add' = map.get(action) as 'remove' | 'add';

        const target : Moderator | null = await message.getIdFromArgument(2);
        if (!target) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!`)
        await target.init()

        if (!await target.isExists()) return await message.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!`)
        if (target.rank instanceof PanelModeratorRank && sender.rank.weight < ModeratorRank.CHIEF.weight) return await message.reply(`–° –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ú–ë–ò –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ì–ª–∞–≤–Ω—ã–π –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!`);
        if (target.rank instanceof ModeratorRank && target.rank.weight >= sender.rank.weight) return await message.reply(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!`)

        if (abanAction === 'remove' && !target.aban) return await message.reply(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–¥–º–∏–Ω-–±–∞–Ω–∞!`)
        if (abanAction === 'add' && target.aban) return await message.reply(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–±–∞–Ω!`)

        await target.getStatisticService().aban(abanAction === 'add');
        await target.send(`${abanAction === 'add' ? '‚ùÑÔ∏è' : 'üî•'} ${await sender.getMention(NameCase.NOM)} ${abanAction === 'add' ? '–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∑–∏–ª' : '—Ä–∞–∑–º–æ—Ä–æ–∑–∏–ª'} –≤–∞—à–∏ –ø—Ä–∞–≤–∞.${abanAction === 'add' ? ' –í —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.' : ''}`)
        await message.reply(`–£—Å–ø–µ—à–Ω–æ!`)

    }

}