import {BaseExecutor} from "../../../core/classes/base/executors/BaseExecutor";
import {PrivateMessageEvent} from "../../../core/classes/impl/events/PrivateMessageEvent";
import {Some} from "../../../core/types/Some";
import {PrivateCommand} from "../../../core/annotations/routing/PrivateCommand";
import {Moderator} from "../../../core/classes/impl/entity/Moderator";
import {ModeratorRank} from "../../../core/classes/impl/enums/ModeratorRank";
import {PanelModeratorRank} from "../../../core/classes/impl/enums/PanelModeratorRank";
import {NameCase} from "../../../core/classes/impl/enums/NameCase";
import {Color} from "../../../core/classes/impl/enums/Color";

@PrivateCommand('unwarn')
@PrivateCommand('unvig')
@PrivateCommand('–∞–Ω–≤–∞—Ä–Ω')
@PrivateCommand('–∞–Ω–≤—ã–≥')
@PrivateCommand('—É–Ω–≤—ã–≥')
@PrivateCommand('—É–Ω–≤–∞—Ä–Ω')
export class PrivateUnwarn extends BaseExecutor {

    public async execute(message: PrivateMessageEvent) : Some {
        const sender : Moderator = message.sender;
        await sender.init()
        if (!(sender.rank instanceof ModeratorRank) || sender.rank.weight < ModeratorRank.CURATOR.weight) return;

        if (message.args.length < 3) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è!`)
        const target : Moderator | null = await message.getIdFromArgument(1)
        if (!target) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`)
        await target.init();


        if (!await target.isExists()) return await message.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!`)

        if (sender.rank.weight <= target.rank.weight) {
            return await message.reply(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!`)
        }

        if (target.rank instanceof PanelModeratorRank && sender.rank !== ModeratorRank.CHIEF) {
            return await message.reply(`–° –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ú–ë–ò –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ì–ª–∞–≤–Ω—ã–π –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!`)
        }

        const warnType : string = message.args[2].toLowerCase();
        if (!['–≤—ã–≥–æ–≤–æ—Ä', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'].includes(warnType)) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø –≤—ã–≥–æ–≤–æ—Ä–∞! –õ–∏–±–æ "–≤—ã–≥–æ–≤–æ—Ä", –ª–∏–±–æ "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"!`)

        const warns : number = warnType === '–≤—ã–≥–æ–≤–æ—Ä' ? target.warns : target.preds;
        if (warns <= 0) return await message.reply(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è!`)

        await target.getStatisticService().unwarn(warnType as '–≤—ã–≥–æ–≤–æ—Ä' | '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')
        await target.send(`üàØ –í–∞–º ${warnType === '–≤—ã–≥–æ–≤–æ—Ä' ? '–±—ã–ª —Å–Ω—è—Ç –æ–¥–∏–Ω –≤—ã–≥–æ–≤–æ—Ä' : '–±—ã–ª–æ —Å–Ω—è—Ç–æ –æ–¥–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'} ${await sender.getMention(NameCase.INS)}! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ${warnType === '–≤—ã–≥–æ–≤–æ—Ä' ? '–≤—ã–≥–æ–≤–æ—Ä–æ–≤' : '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π'}: ${warns-1}`)
        await message.reply(`–£—Å–ø–µ—à–Ω–æ!`, {title: '–ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', color: Color.BLUE, payload: {command: 'statistic', user: target.userId}})
    }

}