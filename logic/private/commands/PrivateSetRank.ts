import {BaseExecutor} from "../../../core/classes/base/executors/BaseExecutor";
import {PrivateMessageEvent} from "../../../core/classes/impl/events/PrivateMessageEvent";
import {Some} from "../../../core/types/Some";
import {PrivateCommand} from "../../../core/annotations/routing/PrivateCommand";
import {Moderator} from "../../../core/classes/impl/entity/Moderator";
import {ModeratorType} from "../../../core/classes/impl/enums/ModeratorType";
import {ModeratorRank} from "../../../core/classes/impl/enums/ModeratorRank";
import {PanelModeratorRank} from "../../../core/classes/impl/enums/PanelModeratorRank";
import {NameCase} from "../../../core/classes/impl/enums/NameCase";
import {Color} from "../../../core/classes/impl/enums/Color";

@PrivateCommand('setrank')
@PrivateCommand('—Å–µ—Ç—Ä–∞–Ω–≥')
@PrivateCommand('–ø–æ–≤—ã—Å–∏—Ç—å')
@PrivateCommand('–ø–æ–Ω–∏–∑–∏—Ç—å')
export class PrivateSetRank extends BaseExecutor {

    public async execute(message: PrivateMessageEvent) : Some {
        const sender : Moderator = message.sender;
        await sender.init()
        if (!(sender.rank instanceof ModeratorRank) || sender.rank.weight < ModeratorRank.DEPUTY.weight) return;

        if (message.args.length < 3) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É!`)
        const target : Moderator | null = await message.getIdFromArgument(1)
        if (!target) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`)
        const newRank : string = message.args[2]
        await target.init();
        let selectedRank : ModeratorRank | PanelModeratorRank;

        if (!await target.isExists()) return await message.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!`)

        if (target.moderatorType === ModeratorType.BASIC) {
            const map : Map<string, ModeratorRank> = new Map([
                ['–∑–≥–º', ModeratorRank.DEPUTY],
                ['–∫–º', ModeratorRank.CURATOR],
                ['—Å–º', ModeratorRank.SENIOR_MODERATOR],
                ['–º', ModeratorRank.MIDDLE_MODERATOR],
                ['–º–º', ModeratorRank.JUNIOR_MODERATOR]
            ])
            if (!map.has(newRank.toLowerCase())) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–∞–≤–µ! –ù–∞–ø—Ä–∏–º–µ—Ä: "–∑–≥–º", "–∫–º", "—Å–º", "–º", "–º–º"`)
            selectedRank = map.get(newRank.toLowerCase()) as ModeratorRank;
            if (selectedRank.weight >= sender.rank.weight) return await message.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å —Ç–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å!')
        } else {
            const map : Map<string, PanelModeratorRank> = new Map([
                ['—Å–º', PanelModeratorRank.SENIOR_MODERATOR],
                ['–º', PanelModeratorRank.MIDDLE_MODERATOR],
            ])
            if (!map.has(newRank.toLowerCase())) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–∞–≤–µ –ú–ë–ò! –ù–∞–ø—Ä–∏–º–µ—Ä: "—Å–º", "–º"`)
            selectedRank = map.get(newRank.toLowerCase()) as PanelModeratorRank;
        }

        if (selectedRank.weight >= sender.rank.weight) return await message.reply(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å —Ç–∞–∫–æ–π —Ä–∞–Ω–≥!`)

        if (sender.rank.weight <= target.rank.weight) {
            return await message.reply(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!`)
        }

        if (target.rank instanceof PanelModeratorRank && sender.rank !== ModeratorRank.CHIEF) {
            return await message.reply(`–° –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ú–ë–ò –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ì–ª–∞–≤–Ω—ã–π –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!`)
        }

        await target.getStatisticService().setRank(selectedRank.tag)
        await target.send(`üåà –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω —Ä–∞–Ω–≥ ¬´${selectedRank.displayName}¬ª ${await sender.getMention(NameCase.INS)}!`)
        await message.reply(`–£—Å–ø–µ—à–Ω–æ!`, {
            title: '–ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ',
            color: Color.BLUE,
            payload: {command: 'statistic', user: target.userId}
        })
    }

}