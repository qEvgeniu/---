import {BaseExecutor} from "../../../core/classes/base/executors/BaseExecutor";
import {Some} from "../../../core/types/Some";
import {PrivateMessageEvent} from "../../../core/classes/impl/events/PrivateMessageEvent";
import {PrivateCommand} from "../../../core/annotations/routing/PrivateCommand";
import {Moderator} from "../../../core/classes/impl/entity/Moderator";
import {ModeratorRank} from "../../../core/classes/impl/enums/ModeratorRank";
import {PanelModeratorRank} from "../../../core/classes/impl/enums/PanelModeratorRank";
import {NameCase} from "../../../core/classes/impl/enums/NameCase";
import {Color} from "../../../core/classes/impl/enums/Color";

@PrivateCommand('warn')
@PrivateCommand('–≤—ã–≥')
@PrivateCommand('–≤—ã–≥–æ–≤–æ—Ä')
export class PrivateWarn extends BaseExecutor {

    public async execute(message: PrivateMessageEvent) : Some {
        const sender : Moderator = message.sender;
        await sender.init()
        if (!(sender.rank instanceof ModeratorRank) || sender.rank.weight < ModeratorRank.CURATOR.weight) return;

        if (message.args.length < 3) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É!`)
        const target : Moderator | null = await message.getIdFromArgument(1)
        if (!target) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`)
        await target.init();


        if (!await target.isExists()) return await message.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!`)

        if (sender.rank.weight <= target.rank.weight) {
            return await message.reply(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!`)
        }

        if (target.rank instanceof PanelModeratorRank && sender.rank !== ModeratorRank.CHIEF) {
            return await message.reply(`–° –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ú–ë–ò –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ì–ª–∞–≤–Ω—ã–π –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!`)
        }

        const reason : string = message.args.slice(2).join(' ')
        if (reason.length > 255) return await message.reply(`–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤!`)

        if (target.warns >= 2) {
            await target.getStatisticService().kick();
            await target.send(`üò• –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã ${await sender.getMention(NameCase.INS)} –∑–∞ 3/3 –≤—ã–≥–æ–≤–æ—Ä–æ–≤. –ü—Ä–∏—á–∏–Ω–∞ –≤—ã–≥–æ–≤–æ—Ä–∞: ${reason}`)
            return await message.reply(`–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –±—ã–ª —Å–Ω—è—Ç –∑–∞ 3/3 –≤—ã–≥–æ–≤–æ—Ä–æ–≤.`)
        }

        await target.getStatisticService().warn('–≤—ã–≥–æ–≤–æ—Ä')
        await target.send(`‚ùó –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –≤—ã–≥–æ–≤–æ—Ä –æ—Ç ${await sender.getMention(NameCase.GEN)} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}.\n–ö–æ–ª-–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤: ${target.warns+1}/3`)
        await message.reply(`–í—ã–≥–æ–≤–æ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!`, {title: '–ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', color: Color.BLUE, payload: {command: 'statistic', user: target.userId}})

    }

}