import {BaseExecutor} from "../../../core/classes/base/executors/BaseExecutor";
import {PrivateMessageEvent} from "../../../core/classes/impl/events/PrivateMessageEvent";
import {Some} from "../../../core/types/Some";
import {Moderator} from "../../../core/classes/impl/entity/Moderator";
import {Session} from "../../../core/namespaces/Session";
import {Messages} from "../../../core/namespaces/Messages";

export class Suggestion extends BaseExecutor {

    public async execute(message: PrivateMessageEvent) : Some {
        const sender : Moderator = message.sender;
        await sender.init();

        if (message.text.trim() === "") return await message.reply(`–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç!`)
        for (const i of await message.sender.getHead()) {
            await i.send(`‚ú¥Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ—Ç ${sender.getOnlyMention(sender.nick)}.\n\nüíû ${message.text}`)
        }
        await message.reply(`‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ì–ª–∞–≤–Ω–æ–º—É –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—É! –í–æ—Ç –µ–≥–æ —Ç–µ–∫—Å—Ç: ${message.text}`, Messages.TO_STATISTIC(sender.userId))
        Session.SUGGESTIONS.delete(sender.userId);
    }

}